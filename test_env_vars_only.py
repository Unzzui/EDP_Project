#!/usr/bin/env python3
"""
Test para verificar que las variables de entorno separadas trabajen EXCLUSIVAMENTE
sin buscar archivos cuando est√°n todas presentes.
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path

# A√±adir el proyecto al path para poder importar
sys.path.insert(0, '/home/unzzui/Documents/coding/EDP_Project')

def test_env_vars_only():
    """Test que las variables de entorno separadas trabajen exclusivamente."""
    
    print("="*60)
    print("üß™ TEST: Variables de entorno separadas EXCLUSIVAMENTE")
    print("="*60)
    
    # Limpiar variables existentes para empezar limpio
    old_env = {}
    vars_to_clear = [
        'GOOGLE_APPLICATION_CREDENTIALS',
        'GOOGLE_CREDENTIALS', 
        'GOOGLE_CREDENTIALS_FILE',
        'GOOGLE_PROJECT_ID',
        'GOOGLE_CLIENT_EMAIL', 
        'GOOGLE_PRIVATE_KEY'
    ]
    
    for var in vars_to_clear:
        old_env[var] = os.environ.get(var)
        if var in os.environ:
            del os.environ[var]
    
    try:
        print("üìã PASO 1: Configurar SOLO variables de entorno separadas")
        
        # Configurar variables separadas v√°lidas
        os.environ['GOOGLE_PROJECT_ID'] = 'test-project-123'
        os.environ['GOOGLE_CLIENT_EMAIL'] = 'test-service@test-project-123.iam.gserviceaccount.com'
        os.environ['GOOGLE_PRIVATE_KEY'] = '''-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VQJQdGxTq6eF
wQ8TN8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kH
T7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOv
AwQ8TN8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+k
HT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtO
vAwQ8TN8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+
kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOtOvAwj+kHT7M8j3m7+nE8yOt
OvAwQ8TN8yOtOvAwj+kHT7M8j3m7+nEQIDAQABAoIBADfGHKuoq9HNxEgJqo4a
-----END PRIVATE KEY-----'''
        
        print(f"   ‚úÖ GOOGLE_PROJECT_ID = {os.environ['GOOGLE_PROJECT_ID']}")
        print(f"   ‚úÖ GOOGLE_CLIENT_EMAIL = {os.environ['GOOGLE_CLIENT_EMAIL']}")
        print(f"   ‚úÖ GOOGLE_PRIVATE_KEY = *** (configurada)")
        
        print("\nüìã PASO 2: Verificar que NO hay archivos ni otras variables")
        
        # Verificar que no hay otras variables de archivo
        for var in ['GOOGLE_APPLICATION_CREDENTIALS', 'GOOGLE_CREDENTIALS', 'GOOGLE_CREDENTIALS_FILE']:
            value = os.environ.get(var)
            if value:
                print(f"   ‚ùå {var} est√° configurada: {value}")
            else:
                print(f"   ‚úÖ {var} = NOT_SET")
        
        print("\nüìã PASO 3: Importar configuraci√≥n y verificar comportamiento")
        
        # Importar y probar la configuraci√≥n
        from edp_mvp.app.config import Config
        
        # Crear instancia de configuraci√≥n
        config_instance = Config()
        
        print(f"\nüìã PASO 4: Resultado de _get_google_credentials_path()")
        credentials_path = config_instance._get_google_credentials_path()
        
        if credentials_path:
            print(f"‚úÖ Credenciales path obtenido: {credentials_path}")
            
            # Verificar que es un archivo temporal
            if '/tmp/' in credentials_path:
                print("‚úÖ Es un archivo temporal (correcto para variables separadas)")
            else:
                print("‚ö†Ô∏è No es un archivo temporal - podr√≠a ser un archivo existente")
            
            # Verificar que el archivo existe y tiene contenido v√°lido
            if os.path.exists(credentials_path):
                print("‚úÖ El archivo de credenciales existe")
                
                import json
                try:
                    with open(credentials_path, 'r') as f:
                        cred_data = json.load(f)
                    
                    print("‚úÖ Archivo JSON v√°lido")
                    print(f"   üìß client_email: {cred_data.get('client_email', 'N/A')}")
                    print(f"   üÜî project_id: {cred_data.get('project_id', 'N/A')}")
                    print(f"   üîê private_key: {'***' + cred_data.get('private_key', '')[-20:] if cred_data.get('private_key') else 'N/A'}")
                    
                    required_fields = ['client_email', 'private_key', 'project_id']
                    missing = [f for f in required_fields if not cred_data.get(f)]
                    if missing:
                        print(f"‚ùå Faltan campos requeridos: {missing}")
                    else:
                        print("‚úÖ Todos los campos requeridos est√°n presentes")
                        
                except Exception as e:
                    print(f"‚ùå Error leyendo credenciales generadas: {e}")
            else:
                print("‚ùå El archivo de credenciales no existe")
        else:
            print("‚ùå No se obtuvieron credenciales")
        
        print("\n" + "="*60)
        print("üéØ RESUMEN DEL TEST")
        print("="*60)
        
        if credentials_path and '/tmp/' in credentials_path and os.path.exists(credentials_path):
            print("‚úÖ TEST PASADO: Variables separadas trabajaron exclusivamente")
            print("‚úÖ Se gener√≥ archivo temporal correctamente")
            print("‚úÖ No se buscaron archivos existentes")
            return True
        else:
            print("‚ùå TEST FALL√ì: Variables separadas no funcionaron correctamente")
            return False
            
    finally:
        # Restaurar variables de entorno originales
        print("\nüßπ Limpiando variables de entorno...")
        for var in vars_to_clear:
            if var in os.environ:
                del os.environ[var]
            if old_env[var] is not None:
                os.environ[var] = old_env[var]

def test_fallback_to_files():
    """Test que el fallback a archivos funcione cuando faltan variables."""
    
    print("\n" + "="*60)
    print("üß™ TEST: Fallback a archivos cuando faltan variables")
    print("="*60)
    
    # Limpiar variables existentes
    old_env = {}
    vars_to_clear = [
        'GOOGLE_APPLICATION_CREDENTIALS',
        'GOOGLE_CREDENTIALS', 
        'GOOGLE_CREDENTIALS_FILE',
        'GOOGLE_PROJECT_ID',
        'GOOGLE_CLIENT_EMAIL', 
        'GOOGLE_PRIVATE_KEY'
    ]
    
    for var in vars_to_clear:
        old_env[var] = os.environ.get(var)
        if var in os.environ:
            del os.environ[var]
    
    try:
        print("üìã PASO 1: Configurar SOLO algunas variables (incompletas)")
        
        # Configurar solo algunas variables (para forzar fallback)
        os.environ['GOOGLE_PROJECT_ID'] = 'test-project-123'
        # Falta GOOGLE_CLIENT_EMAIL y GOOGLE_PRIVATE_KEY
        
        print(f"   ‚úÖ GOOGLE_PROJECT_ID = {os.environ['GOOGLE_PROJECT_ID']}")
        print(f"   ‚ùå GOOGLE_CLIENT_EMAIL = NOT_SET")
        print(f"   ‚ùå GOOGLE_PRIVATE_KEY = NOT_SET")
        
        print("\nüìã PASO 2: Importar configuraci√≥n y verificar fallback")
        
        # Importar y probar la configuraci√≥n
        from edp_mvp.app.config import Config
        
        # Crear instancia de configuraci√≥n
        config_instance = Config()
        
        print(f"\nüìã PASO 3: Resultado de _get_google_credentials_path()")
        credentials_path = config_instance._get_google_credentials_path()
        
        print("\n" + "="*60)
        print("üéØ RESUMEN DEL TEST FALLBACK")
        print("="*60)
        
        if credentials_path is None:
            print("‚úÖ TEST PASADO: Fallback funcion√≥ correctamente")
            print("‚úÖ Variables incompletas detectadas")
            print("‚úÖ Se buscaron archivos como fallback")
            print("‚úÖ No se encontraron archivos (esperado en este test)")
            return True
        else:
            print("‚ö†Ô∏è TEST RESULTADO: Se encontraron credenciales en archivos")
            print(f"üìÅ Archivo encontrado: {credentials_path}")
            return True
            
    finally:
        # Restaurar variables de entorno originales
        print("\nüßπ Limpiando variables de entorno...")
        for var in vars_to_clear:
            if var in os.environ:
                del os.environ[var]
            if old_env[var] is not None:
                os.environ[var] = old_env[var]

if __name__ == "__main__":
    print("üöÄ Iniciando tests de configuraci√≥n de credenciales Google...")
    
    # Test 1: Variables separadas exclusivamente
    test1_result = test_env_vars_only()
    
    # Test 2: Fallback a archivos
    test2_result = test_fallback_to_files()
    
    print("\n" + "="*60)
    print("üèÅ RESULTADOS FINALES")
    print("="*60)
    
    if test1_result:
        print("‚úÖ Test 1 (Variables exclusivas): PASADO")
    else:
        print("‚ùå Test 1 (Variables exclusivas): FALL√ì")
    
    if test2_result:
        print("‚úÖ Test 2 (Fallback a archivos): PASADO")
    else:
        print("‚ùå Test 2 (Fallback a archivos): FALL√ì")
    
    if test1_result and test2_result:
        print("\nüéâ TODOS LOS TESTS PASARON")
        sys.exit(0)
    else:
        print("\nüí• ALGUNOS TESTS FALLARON")
        sys.exit(1)
