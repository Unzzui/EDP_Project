#!/bin/bash

# üéØ SCRIPT DE MIGRACI√ìN CR√çTICA: Conversi√≥n de Pagora MVP a Herramienta de Inteligencia Operacional
# 
# Este script ejecuta la migraci√≥n completa que transforma la base de datos
# de un simple tracker transaccional a una plataforma de inteligencia operacional completa.
#
# Autor: Pagora MVP Enhancement Team
# Fecha: 2025-01-28

set -e  # Exit on any error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Banner
echo -e "${PURPLE}"
echo "================================================================================"
echo "üéØ MIGRACI√ìN CR√çTICA: Pagora MVP ‚Üí Herramienta de Inteligencia Operacional"
echo "================================================================================"
echo -e "${NC}"

# Verificar que estamos en el directorio correcto
if [ ! -f "migration_database_enhancement.py" ]; then
    echo -e "${RED}‚ùå Error: No se encuentra el archivo de migraci√≥n.${NC}"
    echo "Aseg√∫rate de ejecutar este script desde el directorio edp_mvp/"
    exit 1
fi

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  -p, --python     Usar el script Python (recomendado)"
    echo "  -s, --sql        Usar el script SQL directo"
    echo "  -b, --backup     Solo crear backup de seguridad"
    echo "  -v, --verify     Solo verificar estado de la migraci√≥n"
    echo "  -h, --help       Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0 --python      # Ejecutar migraci√≥n completa con Python"
    echo "  $0 --sql         # Ejecutar migraci√≥n con SQL directo"
    echo "  $0 --backup      # Solo crear backup"
    echo "  $0 --verify      # Verificar estado actual"
}

# Funci√≥n para crear backup
create_backup() {
    echo -e "${BLUE}üìã Creando backup de seguridad...${NC}"
    
    # Crear directorio de backup si no existe
    mkdir -p backups
    
    # Generar timestamp
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    
    # Backup de SQLite si existe
    if [ -f "instance/database.db" ]; then
        cp "instance/database.db" "backups/database_backup_${TIMESTAMP}.db"
        echo -e "${GREEN}‚úÖ Backup SQLite creado: backups/database_backup_${TIMESTAMP}.db${NC}"
    fi
    
    # Backup de logs
    if [ -f "migration_enhancement.log" ]; then
        cp "migration_enhancement.log" "backups/migration_log_${TIMESTAMP}.log"
    fi
    
    echo -e "${GREEN}‚úÖ Backup de seguridad completado${NC}"
}

# Funci√≥n para verificar estado
verify_migration() {
    echo -e "${BLUE}üîç Verificando estado de la migraci√≥n...${NC}"
    
    python3 -c "
import sqlite3
import os

db_path = 'instance/database.db'
if not os.path.exists(db_path):
    print('‚ùå Base de datos no encontrada')
    exit(1)

conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Verificar tablas nuevas
tables_to_check = ['edp_status_history', 'client_profiles', 'kpi_snapshots']
for table in tables_to_check:
    try:
        cursor.execute(f'SELECT COUNT(*) FROM {table}')
        count = cursor.fetchone()[0]
        print(f'‚úÖ {table}: {count} registros')
    except:
        print(f'‚ùå {table}: No existe')

# Verificar campos nuevos en EDP
try:
    cursor.execute('PRAGMA table_info(edp)')
    columns = [row[1] for row in cursor.fetchall()]
    
    new_fields = ['prioridad', 'complejidad_tecnica', 'dias_en_cliente', 'fecha_aprobacion_interna']
    for field in new_fields:
        if field in columns:
            print(f'‚úÖ Campo {field}: Existe')
        else:
            print(f'‚ùå Campo {field}: No existe')
except Exception as e:
    print(f'‚ùå Error verificando campos: {e}')

conn.close()
"
}

# Funci√≥n para ejecutar migraci√≥n con Python
run_python_migration() {
    echo -e "${BLUE}üêç Ejecutando migraci√≥n con Python...${NC}"
    
    # Verificar que existe el entorno virtual
    if [ ! -d "../.venv" ] && [ ! -d ".venv" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No se encontr√≥ entorno virtual. Instalando dependencias...${NC}"
        python3 -m pip install -r ../requirements.txt || python3 -m pip install -r requirements.txt
    fi
    
    # Activar entorno virtual si existe
    if [ -d "../.venv" ]; then
        source ../.venv/bin/activate
    elif [ -d ".venv" ]; then
        source .venv/bin/activate
    fi
    
    # Ejecutar migraci√≥n
    python3 migration_database_enhancement.py
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Migraci√≥n Python completada exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error en migraci√≥n Python${NC}"
        exit 1
    fi
}

# Funci√≥n para ejecutar migraci√≥n con SQL
run_sql_migration() {
    echo -e "${BLUE}üìä Ejecutando migraci√≥n con SQL directo...${NC}"
    
    # Verificar que existe la base de datos
    if [ ! -f "instance/database.db" ]; then
        echo -e "${RED}‚ùå No se encontr√≥ la base de datos SQLite${NC}"
        exit 1
    fi
    
    # Ejecutar script SQL
    sqlite3 instance/database.db < enhancement_migration.sql
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Migraci√≥n SQL completada exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error en migraci√≥n SQL${NC}"
        exit 1
    fi
}

# Funci√≥n para mostrar resumen final
show_summary() {
    echo -e "${PURPLE}"
    echo "================================================================================"
    echo "üéâ MIGRACI√ìN COMPLETADA EXITOSAMENTE"
    echo "================================================================================"
    echo -e "${NC}"
    echo -e "${GREEN}Tu base de datos ahora incluye:${NC}"
    echo -e "${GREEN}‚úÖ Tipos monetarios DECIMAL para precisi√≥n financiera${NC}"
    echo -e "${GREEN}‚úÖ Historial autom√°tico de cambios de estado${NC}"
    echo -e "${GREEN}‚úÖ Perfiles de clientes para an√°lisis predictivo${NC}"
    echo -e "${GREEN}‚úÖ Tracking temporal granular de procesos${NC}"
    echo -e "${GREEN}‚úÖ KPI snapshots para an√°lisis de tendencias${NC}"
    echo -e "${GREEN}‚úÖ Triggers autom√°ticos para consistencia${NC}"
    echo -e "${GREEN}‚úÖ √çndices optimizados para performance${NC}"
    echo ""
    echo -e "${BLUE}üöÄ Pagora MVP ahora es una herramienta de inteligencia operacional completa!${NC}"
    echo ""
    echo -e "${YELLOW}üìã Pr√≥ximos pasos recomendados:${NC}"
    echo "1. Verificar la migraci√≥n: $0 --verify"
    echo "2. Reiniciar la aplicaci√≥n para cargar nuevos modelos"
    echo "3. Probar las nuevas funcionalidades en el dashboard"
    echo "4. Revisar los logs de migraci√≥n: tail -f migration_enhancement.log"
}

# Procesar argumentos
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    -b|--backup)
        create_backup
        exit 0
        ;;
    -v|--verify)
        verify_migration
        exit 0
        ;;
    -s|--sql)
        echo -e "${YELLOW}üö® ADVERTENCIA: Ejecutando migraci√≥n SQL directa${NC}"
        echo "Esto modificar√° permanentemente tu base de datos."
        read -p "¬øEst√°s seguro? (s/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ss]$ ]]; then
            create_backup
            run_sql_migration
            verify_migration
            show_summary
        else
            echo "Migraci√≥n cancelada."
            exit 0
        fi
        ;;
    -p|--python|"")
        echo -e "${YELLOW}üö® ADVERTENCIA: Ejecutando migraci√≥n cr√≠tica de base de datos${NC}"
        echo "Esto transformar√° tu base de datos en una herramienta de inteligencia operacional."
        echo "Se crear√° un backup autom√°tico antes de proceder."
        echo ""
        read -p "¬øContinuar con la migraci√≥n? (s/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ss]$ ]]; then
            create_backup
            run_python_migration
            verify_migration
            show_summary
        else
            echo "Migraci√≥n cancelada."
            exit 0
        fi
        ;;
    *)
        echo -e "${RED}‚ùå Opci√≥n no v√°lida: $1${NC}"
        show_help
        exit 1
        ;;
esac 